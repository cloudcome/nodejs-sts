#!/usr/bin/env node


'use strict';

var command = require('ydr-utils').command;
var debug = require('ydr-utils').debug;
var npm = require('ydr-utils').npm;
var system = require('ydr-utils').system;
var openBrowser = require('open');

var pkg = require('../package.json');
var staticServer = require('../libs/static-server.js');

var scopeIP = system.localIP();

// command config
command.alias({
    v: 'version',
    V: 'version',
    h: 'help',
    H: 'help'
});


/**
 * 命令入口
 * @param webroot
 */
command.if('version', function () {
    debug.success('local version', pkg.version);
    npm.getLatestVersion(pkg.name, function (err, version) {
        if (err) {
            debug.error('error', err.message);
            console.log();
            return;
        }

        debug.success('online version', version);
        console.log();
    });
});

command.if('start', function (args) {
    staticServer(this.cwd, args.port, function (err) {
        if (err) {
            debug.error('sts', err.message);
            return process.exit(1);
        }

        var port = this.address().port;
        var url = 'http://' + scopeIP + ':' + port;

        debug.success('sts', 'A static server is running.');
        debug.success('open', url);
        console.log();
        openBrowser(url);
    });
});

command.if('help', function () {
    debug.warn('sts [port]', 'start a static server in current dirname', true);
    debug.warn('sts help', 'get help info', true);
    debug.warn('sts version', 'get version info', true);
    console.log();
});

command.else(function (cmd, args) {
    if (args.help) {
        return command.exec('help');
    }

    if (args.version) {
        return command.exec('version');
    }

    command.exec('start', {
        port: cmd
    });
});

command.parse(process.argv);
